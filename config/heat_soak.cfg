[gcode_macro PRINT_WARMUP]
description: Perform initial homing and heating tasks
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(190) | float %}
    {% set BED_TEMP = params.BED_TEMP | default(65) | float %}

    # Homing, QGL, pre-warming print nozzle etc.
    M104 S{EXTRUDER_TEMP * 0.75}        # set extruder temperature to 75%
    M140 S{BED_TEMP}                    # set bed temperature

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    # wait for the print bed to reach thermal equilibrium
    # !The call to _HEAT_SOAK must be the last line of the PRINT_WARMUP!
    _HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP}

[gcode_macro _HEAT_SOAK]
description: Wait for a specified duration while maintaining temperature

variable_stage: "done"  # stages: heating, soaking, done
variable_total_time_elapsed: 0
variable_soak_time_remaining: 0
variable_check_interval: 1
variable_heater_sensor: None
variable_target_temp: 0.0
variable_heating_report_interval: 2
variable_soaking_report_interval: 5

gcode:
    { action_respond_info( "Heat Soak starting" )}

    # Process required parameters
    {% set HEATER = params.HEATER | string %}
    {% set TARGET = params.TARGET | float %}
    {% set DURATION = params.DURATION | default(10.0) | float %}  # in minutes

    # Optional parameters
    {% set HEATING_REPORT_INTERVAL = params.HEATING_REPORT_INTERVAL | default(2) | int %}
    {% set SOAKING_REPORT_INTERVAL = params.SOAKING_REPORT_INTERVAL | default(5) | int %}

    # User-configurable variables
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=heater_sensor           VALUE="{HEATER | pprint}"
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=target_temp             VALUE={TARGET}
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=heating_report_interval VALUE={HEATING_REPORT_INTERVAL}
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soaking_report_interval VALUE={SOAKING_REPORT_INTERVAL}

    # Set soak time remaining
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION * 60 }  # in seconds

    # Internal variables
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=total_time_elapsed      VALUE=0
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=check_interval          VALUE=1.0

    # Start heating
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=stage                   VALUE="'heating'"
    SET_HEATER_TEMPERATURE HEATER={HEATER} TARGET={TARGET}

    # Pause the print if active to stop further gcodes being executed
    {% set is_print_active = printer['virtual_sdcard'].is_active or printer['virtual_sdcard'].file_position != 0.0 %}
    {% if is_print_active %}
        { action_respond_info( "Heat soak called during active print. Calling PAUSE to halt further gcodes." )}
        { action_respond_info( "printer['virtual_sdcard'].is_active = %s" % printer['virtual_sdcard'].is_active )}
        { action_respond_info( "printer['virtual_sdcard'].file_position = %s" % printer['virtual_sdcard'].file_position )}
        PAUSE
    {% endif %}

    # Start the delayed_gcode loop
    { action_respond_info( "Heat Soak for %s minutes" % soak_time_remaining )}
    UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={check_interval}

[gcode_macro STOP_HEAT_SOAK]
description: Stops heat soak activity
gcode:
    UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION=0  # Cancel any pending run
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=stage VALUE="'done'"

[delayed_gcode _heat_soaker]
# description: Internal macro to handle heat soaking activity
gcode:
    {% set heat_soak = printer['gcode_macro _HEAT_SOAK'] %}

    # Update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set heater_sensor = printer[heat_soak.heater_sensor] %}
    {% set heater_temp = heater_sensor.temperature | round(1) %}
    {% set stage = heat_soak.stage %}

    # { action_respond_info( "Heat Soak stage %s" % stage )}

    # While heating
    {% if stage == "heating" %}
        {% if heater_temp < heat_soak.target_temp %}
            {% if total_time_elapsed % heat_soak.heating_report_interval == 0 %}
                {% set message = "Heating -- %.1f°C / %.1f°C -- %.1f min elapsed" % (heater_temp, heat_soak.target_temp, total_time_elapsed / 60.0) %}
                M117 {message}
                {action_respond_info(message)}
            {% endif %}
        {% else %}
            {action_respond_info("Heating completed after ~%.1f min, starting soak phase." % (total_time_elapsed / 60.0))}
            # Reset total time for soaking phase
            SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=total_time_elapsed VALUE=0
            SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=stage VALUE="'soaking'"
        {% endif %}
    {% elif stage == "soaking" %}
        # Decrement the soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        # End soaking if time is up
        {% if soak_time_remaining <= 0 %}
            {action_respond_info("Heat soak complete after ~%.1f min" % (total_time_elapsed / 60.0))}
            SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=stage VALUE="'done'"
        {% else %}
            # Report progress
            {% if total_time_elapsed % heat_soak.soaking_report_interval == 0 %}
                {% set message = "Soaking -- %.1f min remaining" % (soak_time_remaining / 60.0) %}
                M117 {message}
                {action_respond_info(message)}
            {% endif %}
        {% endif %}
    {% endif %}

    {% if stage in ("done", "cancel") %}
        STOP_HEAT_SOAK
        {% if stage == "cancel" %}
            {% if printer['virtual_sdcard'].is_active %}
                { action_respond_info("Detected active print but heat soak was cancelled. Calling CANCEL_PRINT.") }
                CANCEL_PRINT
            {% endif %}
        {% else %}
            {% if printer['pause_resume'].is_paused  %}
            { action_respond_info("Heat soak done and print is paused. Calling RESUME.") }
                RESUME
            {% endif %}
        {% endif %}
    {% else %}
        # Schedule next check
        UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={ heat_soak.check_interval }
        # Prevent idle timeout
        G4 P1
    {% endif %}
