[gcode_macro PRINT_WARMUP]
description: Perform initial homing and heating tasks
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(190) | float %}
    {% set BED_TEMP = params.BED_TEMP | default(60) | float %}

    # Homing, QGL, pre-warming print nozzle etc.
    M104 S{EXTRUDER_TEMP * 0.75}        # set extruder temperature to 75%
    M140 S{BED_TEMP}                    # set bed temperature

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    # wait for the print bed to reach thermal equilibrium
    # !The call to HEAT_SOAK must be the last line of the PRINT_WARMUP!
    HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP}

[gcode_macro HEAT_SOAK]
description: Wait for a specified duration while maintaining temperature, with the ability to pause and cancel

variable_stage: "done"  # stages: heating, soaking, done
variable_total_time_elapsed: 0
variable_soak_time_remaining: 0
variable_check_interval: 1
variable_heater_sensor: None
variable_target_temp: 0.0
variable_complete: None
variable_cancel: None
variable_heating_report_interval: 2
variable_soaking_report_interval: 5
variable_resume_trigger: False
variable_was_paused: False

gcode:
    { action_respond_info( "Heat Soak starting" )}

    # Process required parameters
    {% set HEATER = params.HEATER | string %}
    {% set TARGET = params.TARGET | float %}
    {% set DURATION = params.DURATION | default(0.0) | float %}  # in minutes

    # Optional parameters
    {% set COMPLETE = params.COMPLETE | default(None) | string %}
    {% set CANCEL = params.CANCEL | default(None) | string %}
    {% set HEATING_REPORT_INTERVAL = params.HEATING_REPORT_INTERVAL | default(2) | int %}
    {% set SOAKING_REPORT_INTERVAL = params.SOAKING_REPORT_INTERVAL | default(5) | int %}

    # User-configurable variables
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=heater_sensor           VALUE="{HEATER | pprint}"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp             VALUE={TARGET}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=complete                VALUE="'{COMPLETE}'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=cancel                  VALUE="'{CANCEL}'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=heating_report_interval VALUE={HEATING_REPORT_INTERVAL}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soaking_report_interval VALUE={SOAKING_REPORT_INTERVAL}

    # Set soak time remaining
    {% if DURATION > 0.0 %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION * 60 }  # in seconds
    {% else %}
        { action_raise_error("HEAT_SOAK requires a DURATION parameter greater than 0.") }
    {% endif %}

    # Internal variables
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed      VALUE=0
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=check_interval          VALUE=1.0
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=resume_trigger          VALUE=False
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=was_paused              VALUE={ printer['pause_resume'].is_paused }

    # Start heating
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage                   VALUE="'heating'"
    SET_HEATER_TEMPERATURE HEATER={HEATER} TARGET={TARGET}

    # Pause the print, if active
    {% if printer['virtual_sdcard'].is_active and not printer['pause_resume'].is_paused %}
        PAUSE
    {% endif %}

    # Start the delayed_gcode loop
    UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={check_interval}

[gcode_macro STOP_HEAT_SOAK]
description: Stops heat soak activity without running any callbacks
gcode:
    UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION=0  # Cancel any pending run
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'done'"

[gcode_macro CANCEL_HEAT_SOAK]
description: Cancels an in-progress HEAT_SOAK cycle and runs the cancel callback
gcode:
    # Check if the HEAT_SOAK macro is active before canceling
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
    {% set stage = heat_soak.stage %}
    {% if stage in ("heating", "soaking") %}
        STOP_HEAT_SOAK
        {% if heat_soak.cancel %}
            {heat_soak.cancel}
        {% endif %}
    {% endif %}

[gcode_macro HEAT_SOAK_RESUME]
description: Resumes while heat soaking; skips soaking phase if in heating
gcode:
    {% set ON_RESUME = (params.ON_RESUME | default("_HEAT_SOAK__BASE_RESUME")) | string %}
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
    {% set stage = heat_soak.stage %}
    {% if stage == "heating" %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=resume_trigger VALUE=True
    {% elif stage == "soaking" %}
        STOP_HEAT_SOAK
        {% if heat_soak.complete %}
            {heat_soak.complete}
        {% endif %}
        {ON_RESUME} {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
    {% else %}
        {ON_RESUME} {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
    {% endif %}

[gcode_macro RESUME]
description: Resumes while heat soaking; skips soaking phase if necessary
rename_existing: _HEAT_SOAK__BASE_RESUME
gcode:
    HEAT_SOAK_RESUME ON_RESUME=_HEAT_SOAK__BASE_RESUME

[delayed_gcode _heat_soaker]
description: Internal macro to handle heat soaking activity
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    # Update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set heater_sensor = printer[heat_soak.heater_sensor] %}
    {% set heater_temp = heater_sensor.temperature | round(1) %}
    {% set stage = heat_soak.stage %}

    # Check if the print was canceled
    {% if printer['pause_resume'].is_paused and not printer['virtual_sdcard'].is_active %}
        STOP_HEAT_SOAK
        {action_respond_info("HEAT_SOAK aborted. Detected that the print was canceled.")}
    {% endif %}

    # Check if the print was resumed without using HEAT_SOAK_RESUME
    {% if not printer['pause_resume'].is_paused and heat_soak.was_paused %}
        STOP_HEAT_SOAK
        {action_respond_info("HEAT_SOAK aborted. Print is no longer paused.")}
    {% endif %}

    # Update the pause state
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=was_paused VALUE={ printer['pause_resume'].is_paused }

    # While heating
    {% if stage == "heating" %}
        {% if heater_temp < heat_soak.target_temp %}
            {% if total_time_elapsed % heat_soak.heating_report_interval == 0 %}
                {% set message = "Heating -- %.1f°C / %.1f°C -- %.1f min elapsed" % (heater_temp, heat_soak.target_temp, total_time_elapsed / 60.0) %}
                M117 {message}
                {action_respond_info(message)}
            {% endif %}
        {% else %}
            {action_respond_info("Heating completed after ~%.1f min, starting soak phase." % (total_time_elapsed / 60.0))}
            # Reset total time for soaking phase
            SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE=0
            {% set stage = "done" if heat_soak.resume_trigger else "soaking" %}
        {% endif %}
    {% endif %}

    # While soaking
    {% if stage == "soaking" %}
        # Decrement the soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        # End soaking if time is up
        {% if soak_time_remaining <= 0 %}
            {action_respond_info("Heat soak complete after ~%.1f min" % (total_time_elapsed / 60.0))}
            {% set stage = "done" %}
        {% else %}
            # Report progress
            {% if total_time_elapsed % heat_soak.soaking_report_interval == 0 %}
                {% set message = "Soaking -- %.1f min remaining" % (soak_time_remaining / 60.0) %}
                M117 {message}
                {action_respond_info(message)}
            {% endif %}
        {% endif %}
    {% endif %}

    # Save current stage
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{stage}'"

    {% if stage in ("done", "cancel") %}
        STOP_HEAT_SOAK
        {% if stage == "cancel" %}
            {% if heat_soak.cancel %}
                {heat_soak.cancel}
            {% elif printer['virtual_sdcard'].is_active %}
                CANCEL_PRINT
            {% endif %}
        {% else %}
            {% if heat_soak.complete %}
                {heat_soak.complete}
            {% endif %}
            {% if printer['pause_resume'].is_paused %}
                RESUME
            {% endif %}
        {% endif %}
    {% else %}
        # Schedule next check
        UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={ heat_soak.check_interval }
        # Prevent idle timeout
        G4 P1
    {% endif %}

    # Update stage variable
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{stage}'"
